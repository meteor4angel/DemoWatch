harp
Copy code
using System;
using System.Globalization;
using System.Windows.Input;

class Program
{
    static void Main()
    {
        string kanjiCharacter = "漢字"; // Your Kanji character
        string yomigana = GetYomigana(kanjiCharacter);
        Console.WriteLine($"Yomigana of {kanjiCharacter}: {yomigana}");
    }

    static string GetYomigana(string kanjiCharacter)
    {
        // Create a TextInputProcessor instance
        var textInputProcessor = new TextInputProcessor(CultureInfo.GetCultureInfo("ja-JP"));

        // Process the Kanji character
        textInputProcessor.ProcessTextInput(kanjiCharacter);

        // Get the Yomigana
        return textInputProcessor.GetReadingForCharacter(kanjiCharacter);
    }
}


using System;
using System.Collections.Generic;
using MeCab;

class Program
{
    static void Main()
    {
        List<string> kanjiList = new List<string> { "漢", "字", "学", "生" };
        
        // Convert Kanji list to Kana list using MeCab
        List<string> kanaList = ConvertKanjiToKanaWithMeCab(kanjiList);
        
        // Sort the list of Kana characters
        var sortedKanaList = SortKana(kanaList);
        
        // Map sorted Kana strings back to their corresponding Kanji strings
        var sortedKanjiList = MapKanaToKanji(sortedKanaList, kanjiList);
        
        // Print the sorted list of Kanji strings
        Console.WriteLine("Sorted Kanji List:");
        foreach (var kanji in sortedKanjiList)
        {
            Console.WriteLine(kanji);
        }
    }

    static List<string> ConvertKanjiToKanaWithMeCab(List<string> kanjiList)
    {
        var kanaList = new List<string>();

        // Create a MeCabTagger instance
        using (var tagger = MeCabTagger.Create())
        {
            foreach (var kanji in kanjiList)
            {
                // Parse the Kanji character
                var node = tagger.ParseToNode(kanji);
                
                // Extract Kana reading from the parsed node
                var kana = node.Feature.Split(',')[8]; // Assuming the reading is at index 8
                kanaList.Add(kana);
            }
        }

        return kanaList;
    }

    static List<string> SortKana(List<string> kanaList)
    {
        // Sort the list of Kana characters using Unicode order
        var sortedKanaList = kanaList.OrderBy(kana => kana).ToList();
        return sortedKanaList;
    }

    static List<string> MapKanaToKanji(List<string> sortedKanaList, List<string> originalKanjiList)
    {
        var sortedKanjiList = new List<string>();

        // Create a dictionary to map Kana strings to their corresponding Kanji strings
        var kanaToKanjiMap = new Dictionary<string, string>();
        for (int i = 0; i < sortedKanaList.Count; i++)
        {
            kanaToKanjiMap.Add(sortedKanaList[i], originalKanjiList[i]);
        }

        // Map sorted Kana strings back to their corresponding Kanji strings
        foreach (var kana in sortedKanaList)
        {
            sortedKanjiList.Add(kanaToKanjiMap[kana]);
        }

        return sortedKanjiList;
    }
}


static List<string> ConvertKanjiToKanaWithMeCab(List<string> kanjiList)
{
    var kanaList = new List<string>();

    // Create a MeCabTagger instance
    using (var tagger = MeCabTagger.Create())
    {
        foreach (var kanji in kanjiList)
        {
            // Parse the Kanji character
            var node = tagger.ParseToNode(kanji);

            // Extract Kana reading from the parsed node
            var features = node.Feature.Split(',');
            // Find the index of the reading feature
            var readingIndex = Array.FindIndex(features, f => f.StartsWith("読み:"));
            // If reading feature exists, extract the reading; otherwise, use surface form
            var kana = readingIndex != -1 ? features[readingIndex].Substring(3) : node.Surface;
            
            kanaList.Add(kana);
        }
    }

    return kanaList;
}
