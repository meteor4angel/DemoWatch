using System;
using System.Collections.Generic;
using System.Linq;

public static class ListHelper
{
    public static List<T> SortByMultipleProperties<T>(List<T> list, Func<T, IComparable>[] propertySelectors, bool[] ascending)
    {
        IOrderedEnumerable<T> sortedList = null;

        for (int i = 0; i < propertySelectors.Length; i++)
        {
            if (sortedList == null)
            {
                sortedList = ascending[i] ?
                    list.OrderBy(propertySelectors[i]) :
                    list.OrderByDescending(propertySelectors[i]);
            }
            else
            {
                sortedList = ascending[i] ?
                    sortedList.ThenBy(propertySelectors[i]) :
                    sortedList.ThenByDescending(propertySelectors[i]);
            }
        }

        return sortedList.ToList();
    }
}

public class MyClass
{
    public int Property1 { get; set; }
    public string Property2 { get; set; }
    public DateTime Property3 { get; set; }
}

class Program
{
    static void Main()
    {
        List<MyClass> myList = new List<MyClass>
        {
            new MyClass { Property1 = 3, Property2 = "C", Property3 = DateTime.Now.AddDays(-1) },
            new MyClass { Property1 = 1, Property2 = "A", Property3 = DateTime.Now.AddDays(1) },
            new MyClass { Property1 = 2, Property2 = "B", Property3 = DateTime.Now }
        };

        // Sort by multiple properties
        var sortedList = ListHelper.SortByMultipleProperties(
            myList,
            new Func<MyClass, IComparable>[] { x => x.Property2, x => x.Property1, x => x.Property3 },
            new bool[] { true, true, true });

        Console.WriteLine("Sorted by multiple properties:");
        foreach (var item in sortedList)
        {
            Console.WriteLine($"Property1: {item.Property1}, Property2: {item.Property2}, Property3: {item.Property3}");
        }
    }
}
