using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace T4TemplateExample
{
    class Program
    {
        static void Main(string[] args)
        {
            string currentDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string csvFilePath = Path.Combine(currentDirectory, "data.csv");
            string t4TemplateFilePath = Path.Combine(currentDirectory, "CsvReaderTemplate.tt");

            // Read CSV file to get column headers and values
            Dictionary<string, List<string>> csvData = ReadCsvFile(csvFilePath);

            // Check if a property name exists
            string propertyNameToCheck = "Age";
            bool propertyNameExists = csvData.ContainsKey(propertyNameToCheck);
            Console.WriteLine($"Property '{propertyNameToCheck}' {(propertyNameExists ? "exists" : "does not exist")} in the CSV file.");

            // Programmatically trigger the transformation of the T4 template file
            string generatedCode = TransformT4Template(t4TemplateFilePath, csvData.Keys.ToArray());

            // Print values of the property if it exists
            if (propertyNameExists)
            {
                PrintPropertyValues(generatedCode, propertyNameToCheck, csvData[propertyNameToCheck]);
            }
            else
            {
                Console.WriteLine($"Property '{propertyNameToCheck}' does not exist in the CSV file.");
            }
        }

        static Dictionary<string, List<string>> ReadCsvFile(string filePath)
        {
            var csvData = new Dictionary<string, List<string>>();

            using (var reader = new StreamReader(filePath))
            {
                var headers = reader.ReadLine().Split(',');
                foreach (var header in headers)
                {
                    csvData.Add(header.Trim(), new List<string>());
                }

                while (!reader.EndOfStream)
                {
                    var values = reader.ReadLine().Split(',');
                    for (int i = 0; i < values.Length; i++)
                    {
                        csvData[headers[i].Trim()].Add(values[i]);
                    }
                }
            }

            return csvData;
        }

        static string TransformT4Template(string templateFilePath, string[] headers)
        {
            // Load the template content
            string templateContent = File.ReadAllText(templateFilePath);

            // Replace placeholders in the template with actual property names
            foreach (var header in headers)
            {
                templateContent = templateContent.Replace("<<PropertyName>>", header);
                // You can add more placeholders in the template and replace them here as needed
            }

            return templateContent;
        }

        static void PrintPropertyValues(string generatedCode, string propertyName, List<string> values)
        {
            Console.WriteLine($"Values of property '{propertyName}':");
            foreach (var value in values)
            {
                Console.WriteLine(value);
            }
        }
    }
}
