<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="string[]" name="FilterColumn" #>
<#@ parameter type="string[]" name="FilterValues" #>

namespace CsvData
{
    public class CsvHelper
    {
        public static List<dynamic> FilterRows(string filePath)
        {
            var filteredRows = new List<dynamic>();

            // Read CSV file and filter rows
            using (var reader = new StreamReader(filePath))
            {
                // Skip header
                reader.ReadLine();

                while (!reader.EndOfStream)
                {
                    var values = reader.ReadLine().Split(',');
                    // Check if value in filter column matches any of the filter values
                    if (<#= FilterValues #>.Contains(values[<#= FilterColumn #>]))
                    {
                        // Create dynamic object for each row
                        dynamic row = new ExpandoObject();
                        row.Name = values[0];
                        row.Age = values[1];
                        row.Country = values[2];
                        filteredRows.Add(row);
                    }
                }
            }

            return filteredRows;
        }
    }
}


using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.CSharp;
using System.Reflection;

namespace T4TemplateExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // Specify the filter column and values
            string filterColumn = "Age";
            string[] filterValues = { "30", "35" }; // Filter values to match

            // Read and filter CSV file using T4 template
            var filteredRows = ReadAndFilterCsvFile("data.csv", filterColumn, filterValues);

            // Print filtered rows
            foreach (var row in filteredRows)
            {
                Console.WriteLine($"Name: {row.Name}, Age: {row.Age}, Country: {row.Country}");
            }
        }

        static List<dynamic> ReadAndFilterCsvFile(string filePath, string filterColumn, string[] filterValues)
        {
            // Generate filtering logic using T4 template
            string generatedCode = GenerateFilteringLogic(filterColumn, filterValues);

            // Compile the generated code
            Assembly assembly = CompileGeneratedCode(generatedCode);

            // Execute the filtering logic
            MethodInfo methodInfo = assembly.GetType("CsvData.CsvHelper").GetMethod("FilterRows");
            List<dynamic> filteredRows = (List<dynamic>)methodInfo.Invoke(null, new object[] { filePath });

            return filteredRows;
        }

        static string GenerateFilteringLogic(string filterColumn, string[] filterValues)
        {
            string templateContent = File.ReadAllText("CsvReaderTemplate.tt");

            var session = new Dictionary<string, string[]>();
            session["FilterColumn"] = new[] { filterColumn };
            session["FilterValues"] = filterValues;

            var host = new Microsoft.VisualStudio.TextTemplating.Engine();
            string generatedCode = host.ProcessTemplate(templateContent, session);

            return generatedCode;
        }

        static Assembly CompileGeneratedCode(string code)
        {
            var compilerParameters = new CompilerParameters
            {
                GenerateInMemory = true,
                GenerateExecutable = false
            };

            compilerParameters.ReferencedAssemblies.Add("System.dll");

            var compilerResults = new CSharpCodeProvider().CompileAssemblyFromSource(compilerParameters, code);

            if (compilerResults.Errors.HasErrors)
            {
                throw new Exception("Compilation failed.");
            }

            return compilerResults.CompiledAssembly;
        }
    }
}









class CustomTextTemplatingEngineHost : ITextTemplatingEngineHost
    {
        public string FileExtension => ".cs";
        public Encoding Encoding => Encoding.UTF8;
        public string TemplateFile { get; }
        public string FileResult { get; private set; }
        
        public CustomTextTemplatingEngineHost(string templateFile)
        {
            TemplateFile = templateFile;
        }

        public string ResolvePath(string path)
        {
            return Path.GetFullPath(path);
        }

        public string ReadFile(string path)
        {
            return File.ReadAllText(path);
        }

        public void ErrorCallback(bool warning, string message, int line, int column)
        {
            Console.WriteLine($"{(warning ? "Warning" : "Error")} at {line}:{column}: {message}");
        }

        // Other members of ITextTemplatingEngineHost can be implemented as needed

        // Sample method to process the template
        public void ProcessTemplate()
        {
            // Create a template engine
            var engine = new Engine();

            // Process the template
            FileResult = engine.ProcessTemplate(ReadFile(TemplateFile), this);

            // Check for errors
            if (!string.IsNullOrEmpty(engine.Errors))
            {
                ErrorCallback(false, engine.Errors, 0, 0);
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Instantiate the custom host
            var host = new CustomTextTemplatingEngineHost("Template.tt");

            // Process the template
            host.ProcessTemplate();

            // Print the result
            Console.WriteLine("Generated code:");
            Console.WriteLine(host.FileResult);
        }
    }
}

static string GenerateT4Template(string ttFileContent, string[] filterColumn, string[] filterValues)
        {
            // Replace placeholders in the .tt file content with actual values
            ttFileContent = ttFileContent.Replace("<#= FilterColumn #>", $"new string[] {{ \"{string.Join("\", \"", filterColumn)}\" }}");
            ttFileContent = ttFileContent.Replace("<#= FilterValues #>", string.Join(", ", filterValues));

            return ttFileContent;
        }


static IEnumerable<string[]> ReadAndFilterCsv(string filePath, Dictionary<string, string[]> filters)
{
    List<string[]> filteredRows = new List<string[]>();

    // Read the CSV file and stream its contents
    using (TextFieldParser parser = new TextFieldParser(filePath))
    {
        parser.TextFieldType = FieldType.Delimited;
        parser.SetDelimiters(",");

        // Read header
        string[] header = parser.ReadFields();

        // Find indices of filter columns
        Dictionary<string, int> filterColumnIndices = new Dictionary<string, int>();
        foreach (var filter in filters)
        {
            int filterColumnIndex = Array.IndexOf(header, filter.Key);
            if (filterColumnIndex == -1)
            {
                throw new ArgumentException($"Filter column '{filter.Key}' not found in CSV file.");
            }
            filterColumnIndices.Add(filter.Key, filterColumnIndex);
        }

        // Read and filter rows
        while (!parser.EndOfData)
        {
            string[] fields = parser.ReadFields();

            // Check if values in all filter columns match any of the filter values
            bool matchAllFilters = true;
            foreach (var filter in filters)
            {
                string filterColumn = filter.Key;
                string[] filterValues = filter.Value;
                int filterColumnIndex = filterColumnIndices[filterColumn];

                if (!filterValues.Contains(fields[filterColumnIndex]))
                {
                    matchAllFilters = false;
                    break;
                }
            }

            if (matchAllFilters)
            {
                filteredRows.Add(fields);
            }
        }
    }

    return filteredRows;
}



<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.String" name="FilePath" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, string[]>" name="Filters" #>

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace CsvData
{
    public class CsvHelper
    {
        public static IEnumerable<string[]> FilterRows(string filePath)
        {
            return FilterRows(filePath, new Dictionary<string, string[]>());
        }

        public static IEnumerable<string[]> FilterRows(string filePath, Dictionary<string, string[]> filters)
        {
            List<string[]> filteredRows = new List<string[]>();

            using (StreamReader reader = new StreamReader(filePath))
            {
                // Read header
                string headerLine = reader.ReadLine();
                string[] header = headerLine.Split(',');

                // Find indices of filter columns
                Dictionary<string, int> filterColumnIndices = new Dictionary<string, int>();
                foreach (var filter in filters)
                {
                    string filterColumn = filter.Key;
                    int filterColumnIndex = Array.IndexOf(header, filterColumn);
                    if (filterColumnIndex == -1)
                    {
                        throw new ArgumentException($"Filter column '{filterColumn}' not found in CSV file.");
                    }
                    filterColumnIndices.Add(filterColumn, filterColumnIndex);
                }

                // Read and filter rows
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine();
                    string[] fields = line.Split(',');

                    // Check if values in all filter columns match any of the filter values
                    bool matchAllFilters = true;
                    foreach (var filter in filters)
                    {
                        string filterColumn = filter.Key;
                        string[] filterValues = filter.Value;
                        int filterColumnIndex = filterColumnIndices[filterColumn];

                        if (!filterValues.Contains(fields[filterColumnIndex]))
                        {
                            matchAllFilters = false;
                            break;
                        }
                    }

                    if (matchAllFilters)
                    {
                        filteredRows.Add(fields);
                    }
                }
            }

            return filteredRows;
        }
    }
}

