using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

public class ApiMethodInfo
{
    public string HttpMethod { get; set; }
    public string Route { get; set; }
    public object SampleResponse { get; set; }
}

public static class ApiMethodInfoGenerator
{
    public static List<ApiMethodInfo> GenerateApiMethodInfo()
    {
        var apiMethodInfoList = new List<ApiMethodInfo>();

        var assembly = Assembly.GetExecutingAssembly();
        var controllerTypes = assembly.GetTypes().Where(t => typeof(ControllerBase).IsAssignableFrom(t));

        foreach (var controllerType in controllerTypes)
        {
            var methods = controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Where(m => m.GetCustomAttributes(typeof(HttpGetAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPostAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPutAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpDeleteAttribute), false).Any());

            foreach (var method in methods)
            {
                var httpMethods = method.GetCustomAttributes<HttpMethodAttribute>().Select(attr => attr.HttpMethods);

                foreach (var httpMethod in httpMethods)
                {
                    var route = method.GetCustomAttributes<RouteAttribute>().FirstOrDefault()?.Template;
                    var returnType = method.ReturnType;

                    // Generate sample response based on return type
                    var sampleResponse = GenerateSampleResponse(returnType);

                    apiMethodInfoList.Add(new ApiMethodInfo
                    {
                        HttpMethod = string.Join(",", httpMethod),
                        Route = route,
                        SampleResponse = sampleResponse
                    });
                }
            }
        }

        return apiMethodInfoList;
    }

    private static object GenerateSampleResponse(Type returnType)
{
    if (returnType.IsGenericType && returnType.GetGenericTypeDefinition() == typeof(Task<>))
    {
        // If the return type is Task<T>, return a sample response for T
        var taskInnerType = returnType.GetGenericArguments()[0];
        return GenerateSampleResponse(taskInnerType);
    }
    else if (returnType.IsValueType || returnType == typeof(string))
    {
        // For value types and strings, return an instance of the type
        return Activator.CreateInstance(returnType);
    }
    else if (returnType.IsClass)
    {
        // For reference types, recursively generate a sample instance and initialize its properties
        var instance = Activator.CreateInstance(returnType);
        foreach (var property in returnType.GetProperties())
        {
            property.SetValue(instance, GenerateSampleResponse(property.PropertyType));
        }
        return instance;
    }
    else
    {
        // Unable to generate sample response for other types
        return null;
    }
}
}

public class Program
{
    public static void Main(string[] args)
    {
        var apiMethodInfoList = ApiMethodInfoGenerator.GenerateApiMethodInfo();

        var json = JsonConvert.SerializeObject(apiMethodInfoList, Formatting.Indented);
        File.WriteAllText("api_methods_info.json", json);
    }
}
