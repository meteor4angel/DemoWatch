using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

public class ResponseInfo
{
    public string HttpMethod { get; set; }
    public string Route { get; set; }
    public int StatusCode { get; set; }
    public Type ResponseType { get; set; }
}

public static class ResponseInfoGenerator
{
    public static List<ResponseInfo> GenerateResponseInfo()
    {
        var responseInfoList = new List<ResponseInfo>();

        var assembly = Assembly.GetExecutingAssembly();
        var controllerTypes = assembly.GetTypes().Where(t => typeof(ControllerBase).IsAssignableFrom(t));

        foreach (var controllerType in controllerTypes)
        {
            var methods = controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Where(m => m.GetCustomAttributes(typeof(HttpGetAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPostAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPutAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpDeleteAttribute), false).Any());

            foreach (var method in methods)
            {
                var httpMethods = method.GetCustomAttributes<HttpMethodAttribute>().Select(attr => attr.HttpMethods);

                foreach (var httpMethod in httpMethods)
                {
                    var route = method.GetCustomAttributes<RouteAttribute>().FirstOrDefault()?.Template;

                    var responseType = method.ReturnType;

                    var statusCodes = method.GetCustomAttributes<ProducesResponseTypeAttribute>()
                                            .Select(attr => attr.StatusCode)
                                            .Distinct();

                    foreach (var statusCode in statusCodes)
                    {
                        responseInfoList.Add(new ResponseInfo
                        {
                            HttpMethod = string.Join(",", httpMethod),
                            Route = route,
                            StatusCode = statusCode,
                            ResponseType = responseType
                        });
                    }
                }
            }
        }

        return responseInfoList;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        var responseInfoList = ResponseInfoGenerator.GenerateResponseInfo();

        var json = JsonConvert.SerializeObject(responseInfoList, Formatting.Indented);
        File.WriteAllText("responses.json", json);
    }
}
