using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

public class ApiMethodInfo
{
    public string HttpMethod { get; set; }
    public string Route { get; set; }
    public object SampleResponse { get; set; }
}

public static class ApiMethodInfoGenerator
{
   private static object GenerateSampleResponseForIActionResult(MethodInfo method, HttpContext httpContext)
{
    // Create an instance of the controller
    var controllerInstance = Activator.CreateInstance(method.DeclaringType);

    // Create an ActionContext
    var actionContext = new ActionContext(httpContext, new Microsoft.AspNetCore.Routing.RouteData(), new Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor());

    // Invoke the action method
    var actionResult = method.Invoke(controllerInstance, new object[] { }) as IActionResult;

    if (actionResult != null)
    {
        // Execute the action result asynchronously to get the response
        var task = Task.Run(async () =>
        {
            // Execute the action result asynchronously
            await actionResult.ExecuteResultAsync(actionContext);
        });

        // Wait for the task to complete and then return the sample response
        task.Wait();

        if (actionResult is ObjectResult objectResult)
        {
            // If the result is ObjectResult, return the value as sample response
            return objectResult.Value;
        }
        else if (actionResult is ContentResult contentResult)
        {
            // If the result is ContentResult, return the content as sample response
            return contentResult.Content;
        }
        // Add other checks for different types of action results as needed
    }

    // Return null if unable to generate a sample response
    return null;
}


public static List<ApiMethodInfo> GenerateApiMethodInfo()
{
    var apiMethodInfoList = new List<ApiMethodInfo>();

    var assembly = Assembly.GetExecutingAssembly();
    var controllerTypes = assembly.GetTypes().Where(t => typeof(ControllerBase).IsAssignableFrom(t));

    foreach (var controllerType in controllerTypes)
    {
        var methods = controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                    .Where(m => m.GetCustomAttributes(typeof(HttpGetAttribute), false).Any() ||
                                                m.GetCustomAttributes(typeof(HttpPostAttribute), false).Any() ||
                                                m.GetCustomAttributes(typeof(HttpPutAttribute), false).Any() ||
                                                m.GetCustomAttributes(typeof(HttpDeleteAttribute), false).Any());

        foreach (var method in methods)
        {
            var httpMethods = method.GetCustomAttributes<HttpMethodAttribute>().Select(attr => attr.HttpMethods);

            foreach (var httpMethod in httpMethods)
            {
                var route = method.GetCustomAttributes<RouteAttribute>().FirstOrDefault()?.Template;

                // Generate sample response
                var sampleResponse = GenerateSampleResponseForIActionResult(method);

                apiMethodInfoList.Add(new ApiMethodInfo
                {
                    HttpMethod = string.Join(",", httpMethod),
                    Route = route,
                    SampleResponse = sampleResponse
                });
            }
        }
    }

    return apiMethodInfoList;
}


}

public class Program
{
    public static void Main(string[] args)
    {
        var apiMethodInfoList = ApiMethodInfoGenerator.GenerateApiMethodInfo();

        var json = JsonConvert.SerializeObject(apiMethodInfoList, Formatting.Indented);
        File.WriteAllText("api_methods_info.json", json);
    }
}
