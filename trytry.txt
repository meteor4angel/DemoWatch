using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

public class ApiMethodInfo
{
    public string HttpMethod { get; set; }
    public string Route { get; set; }
    public object SampleResponse { get; set; }
}

public static class ApiMethodInfoGenerator
{
    public static List<ApiMethodInfo> GenerateApiMethodInfo(IServiceProvider serviceProvider)
    {
        var apiMethodInfoList = new List<ApiMethodInfo>();

        var assembly = Assembly.GetExecutingAssembly();
        var controllerTypes = assembly.GetTypes().Where(t => typeof(ControllerBase).IsAssignableFrom(t));

        foreach (var controllerType in controllerTypes)
        {
            var methods = controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Where(m => m.GetCustomAttributes(typeof(HttpGetAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPostAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPutAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpDeleteAttribute), false).Any());

            foreach (var method in methods)
            {
                var httpMethods = method.GetCustomAttributes<HttpMethodAttribute>().Select(attr => attr.HttpMethods);

                foreach (var httpMethod in httpMethods)
                {
                    var route = method.GetCustomAttributes<RouteAttribute>().FirstOrDefault()?.Template;

                    // Generate sample response
                    var sampleResponse = GenerateSampleResponseForIActionResult(method, serviceProvider);

                    apiMethodInfoList.Add(new ApiMethodInfo
                    {
                        HttpMethod = string.Join(",", httpMethod),
                        Route = route,
                        SampleResponse = sampleResponse
                    });
                }
            }
        }

        return apiMethodInfoList;
    }
private static object GenerateSampleResponseForIActionResult(MethodInfo method, HttpContext httpContext, IServiceProvider serviceProvider)
{
    // Resolve the controller instance using dependency injection
    var controllerType = method.DeclaringType;
    var controllerConstructor = controllerType.GetConstructors().FirstOrDefault();

    if (controllerConstructor == null)
    {
        throw new InvalidOperationException($"Controller {controllerType.Name} does not have a public constructor.");
    }

    // Resolve constructor parameters
    var controllerConstructorParameters = controllerConstructor.GetParameters();
    var resolvedParameters = new List<object>();

    foreach (var parameter in controllerConstructorParameters)
    {
        // Resolve constructor parameter using the service provider
        var resolvedParameter = serviceProvider.GetService(parameter.ParameterType);
        if (resolvedParameter == null)
        {
            throw new InvalidOperationException($"Failed to resolve parameter {parameter.Name} of type {parameter.ParameterType} for controller {controllerType.Name}.");
        }

        resolvedParameters.Add(resolvedParameter);
    }

    // Create an instance of the controller
    var controllerInstance = Activator.CreateInstance(controllerType, resolvedParameters.ToArray());

    // Create a new HttpContext associated with the controller instance
    var controllerHttpContext = new DefaultHttpContext
    {
        RequestServices = serviceProvider,
        User = httpContext.User // You may need to copy other properties from the original HttpContext as needed
    };

    // Set up route data and action descriptor
    var routeData = new RouteData();
    var actionDescriptor = new ControllerActionDescriptor();

    // Create an ActionContext associated with the controller instance
    var actionContext = new ActionContext(controllerHttpContext, routeData, actionDescriptor);

    // Invoke the action method
    var actionResult = method.Invoke(controllerInstance, null) as IActionResult;

    // Process the action result to get the response
    if (actionResult != null)
    {
        if (actionResult is ObjectResult objectResult)
        {
            return objectResult.Value;
        }
        else if (actionResult is ContentResult contentResult)
        {
            return contentResult.Content;
        }
        // Add other checks for different types of action results as needed
    }

    // Return null if unable to generate a sample response
    return null;
}



}
