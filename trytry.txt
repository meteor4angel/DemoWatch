using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;

public class ResponseInfo
{
    public string HttpMethod { get; set; }
    public string Route { get; set; }
    public int StatusCode { get; set; }
    public Type ResponseType { get; set; }
}

public static class ResponseInfoGenerator
{
    public static List<ResponseInfo> GenerateResponseInfo()
    {
        var responseInfoList = new List<ResponseInfo>();

        // Get all types in the assembly
        var assembly = Assembly.GetExecutingAssembly();
        var controllerTypes = assembly.GetTypes().Where(t => t.Name.EndsWith("Controller"));

        foreach (var controllerType in controllerTypes)
        {
            var methods = controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Where(m => m.GetCustomAttributes(typeof(System.Web.Http.HttpGetAttribute), false).Length > 0 ||
                                                    m.GetCustomAttributes(typeof(System.Web.Http.HttpPostAttribute), false).Length > 0 ||
                                                    m.GetCustomAttributes(typeof(System.Web.Http.HttpPutAttribute), false).Length > 0 ||
                                                    m.GetCustomAttributes(typeof(System.Web.Http.HttpDeleteAttribute), false).Length > 0);

            foreach (var method in methods)
            {
                var httpMethods = method.GetCustomAttributes(typeof(System.Web.Http.HttpMethodAttribute), false)
                                        .OfType<System.Web.Http.HttpMethodAttribute>()
                                        .Select(attr => attr.Method);

                foreach (var httpMethod in httpMethods)
                {
                    var route = method.GetCustomAttributes(typeof(System.Web.Http.RouteAttribute), false)
                                      .OfType<System.Web.Http.RouteAttribute>()
                                      .FirstOrDefault()?.Template;

                    var responseType = method.ReturnType;

                    var statusCodes = method.GetCustomAttributes(typeof(System.Web.Http.ActionResult), false)
                                            .OfType<System.Web.Http.IApiResponseTypeMetadataProvider>()
                                            .SelectMany(attr => attr.GetSupportedContentTypes(httpMethod))
                                            .Select(System.Net.Http.Headers.MediaTypeHeaderValue.Parse)
                                            .Where(mediaType => mediaType.MediaType.Equals("application/json", StringComparison.OrdinalIgnoreCase))
                                            .Select(mediaType => (int)mediaType.Parameters.FirstOrDefault(p => p.Name.Equals("status", StringComparison.OrdinalIgnoreCase))?.Value)
                                            .Distinct();

                    foreach (var statusCode in statusCodes)
                    {
                        responseInfoList.Add(new ResponseInfo
                        {
                            HttpMethod = httpMethod.Method,
                            Route = route,
                            StatusCode = statusCode,
                            ResponseType = responseType
                        });
                    }
                }
            }
        }

        return responseInfoList;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        var responseInfoList = ResponseInfoGenerator.GenerateResponseInfo();

        var json = JsonConvert.SerializeObject(responseInfoList, Formatting.Indented);
        File.WriteAllText("responses.json", json);
    }
}
