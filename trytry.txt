using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

public class ApiMethodInfo
{
    public string HttpMethod { get; set; }
    public string Route { get; set; }
    public object SampleResponse { get; set; }
}

public static class ApiMethodInfoGenerator
{
    public static List<ApiMethodInfo> GenerateApiMethodInfo(IServiceProvider serviceProvider)
    {
        var apiMethodInfoList = new List<ApiMethodInfo>();

        var assembly = Assembly.GetExecutingAssembly();
        var controllerTypes = assembly.GetTypes().Where(t => typeof(ControllerBase).IsAssignableFrom(t));

        foreach (var controllerType in controllerTypes)
        {
            var methods = controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Where(m => m.GetCustomAttributes(typeof(HttpGetAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPostAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpPutAttribute), false).Any() ||
                                                    m.GetCustomAttributes(typeof(HttpDeleteAttribute), false).Any());

            foreach (var method in methods)
            {
                var httpMethods = method.GetCustomAttributes<HttpMethodAttribute>().Select(attr => attr.HttpMethods);

                foreach (var httpMethod in httpMethods)
                {
                    var route = method.GetCustomAttributes<RouteAttribute>().FirstOrDefault()?.Template;

                    // Generate sample response
                    var sampleResponse = GenerateSampleResponseForIActionResult(method, serviceProvider);

                    apiMethodInfoList.Add(new ApiMethodInfo
                    {
                        HttpMethod = string.Join(",", httpMethod),
                        Route = route,
                        SampleResponse = sampleResponse
                    });
                }
            }
        }

        return apiMethodInfoList;
    }

    private static object GenerateSampleResponseForIActionResult(MethodInfo method, IServiceProvider serviceProvider)
    {
        // Resolve the controller instance using dependency injection
        var controllerType = method.DeclaringType;
        var controllerInstance = serviceProvider.GetService(controllerType);

        if (controllerInstance == null)
        {
            throw new InvalidOperationException($"Failed to resolve controller {controllerType.Name} from the service provider.");
        }

        // Invoke the action method
        var actionResult = method.Invoke(controllerInstance, null) as IActionResult;

        if (actionResult != null)
        {
            // Execute the action result to get the response
            var result = actionResult.ExecuteResultAsync(CreateActionContext(controllerInstance)).Result;
            if (result is ObjectResult objectResult)
            {
                // If the result is ObjectResult, return the value as sample response
                return objectResult.Value;
            }
            else if (result is ContentResult contentResult)
            {
                // If the result is ContentResult, return the content as sample response
                return contentResult.Content;
            }
            // Add other checks for different types of action results as needed
        }

        // Return null if unable to generate a sample response
        return null;
    }

    private static ActionContext CreateActionContext(object controllerInstance)
    {
        var controllerContext = new ControllerContext();
        var actionContext = new ActionContext(controllerContext, new Microsoft.AspNetCore.Routing.RouteData(), new Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor());
        actionContext.Controller = (ControllerBase)controllerInstance;
        return actionContext;
    }
}
