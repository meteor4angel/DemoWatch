using System;
using System.IO;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;

class Program
{
    static void Main(string[] args)
    {
        // Specify the directory containing your assemblies
        string directoryPath = @"C:\Your\Directory\Path";

        // Specify the namespace you want to include
        string targetNamespace = "Your.Target.Namespace";

        // Load all assemblies in the specified directory
        var assemblies = Directory.GetFiles(directoryPath, "*.dll")
            .Select(Assembly.LoadFrom);

        // Iterate through each assembly
        foreach (var assembly in assemblies)
        {
            // Iterate through types in the assembly
            foreach (var type in assembly.GetTypes())
            {
                // Check if the type belongs to the target namespace
                if (type.Namespace == targetNamespace)
                {
                    // Serialize the type to JSON and write to file
                    SerializeTypeToJson(type);
                }
            }
        }
    }

    static void SerializeTypeToJson(Type type)
    {
        // Create an instance of the type (optional)
        var instance = Activator.CreateInstance(type);

        // Serialize the type to JSON
        string json = JsonConvert.SerializeObject(instance, Formatting.Indented);

        // Write the JSON to a file
        File.WriteAllText($"{type.Name}.json", json);

        Console.WriteLine($"JSON file generated for {type.FullName}.");
    }
}

{
        // Specify the directory containing your class files
        string directoryPath = @"C:\Your\Source\Directory";

        // Get all class files (.cs files) in the directory
        var classFiles = Directory.GetFiles(directoryPath, "*.cs");

        // Iterate through each class file
        foreach (var classFile in classFiles)
        {
            // Read the content of the class file
            string fileContent = File.ReadAllText(classFile);

            // Convert the class file content to JSON
            string json = JsonConvert.SerializeObject(fileContent, Formatting.Indented);

            // Write the JSON to a file with the same name as the class file, but with .json extension
            string jsonFileName = Path.ChangeExtension(classFile, ".json");
            File.WriteAllText(jsonFileName, json);

            Console.WriteLine($"JSON file generated for: {classFile}");
        }


 static void Main(string[] args)
    {
        // Example usage:
        var myClassInstance = (MyClass)InstantiateClass(typeof(MyClass));
        Console.WriteLine(myClassInstance);
    }

    static object InstantiateClass(Type type)
    {
        object instance = Activator.CreateInstance(type);

        foreach (var property in type.GetProperties())
        {
            Type propertyType = property.PropertyType;

            if (propertyType.IsClass && propertyType != typeof(string))
            {
                // Recursive call for complex types (excluding strings)
                object propertyValue = InstantiateClass(propertyType);
                property.SetValue(instance, propertyValue);
            }
            else if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(List<>))
            {
                // Handle list properties
                Type listType = propertyType.GetGenericArguments()[0];
                Type listTypeGenericType = typeof(List<>).MakeGenericType(listType);

                // Create an instance of the list
                var listInstance = (IList)Activator.CreateInstance(listTypeGenericType);

                // Add some dummy values to the list
                for (int i = 1; i <= 3; i++)
                {
                    object listItem = InstantiateClass(listType);
                    listInstance.Add(listItem);
                }

                // Set the list property value
                property.SetValue(instance, listInstance);
            }
            else
            {
                // Set primitive or string property values to defaults
                property.SetValue(instance, GetDefaultValue(propertyType));
            }
        }

        return instance;
    }

    static object GetDefaultValue(Type type)
    {
        return type.IsValueType ? Activator.CreateInstance(type) : null;
    }



 static void SetProperty(object obj, string propertyName, object value)
    {
        Type type = obj.GetType();
        PropertyInfo property = type.GetProperty(propertyName);

        if (property != null && property.CanWrite)
        {
            if (typeof(IEnumerable).IsAssignableFrom(property.PropertyType))
            {
                // If the property is an IEnumerable or IList, handle it as a collection
                SetPropertyForCollection(obj, propertyName, value);
            }
            else if (property.PropertyType.IsClass && property.PropertyType != typeof(string))
            {
                // If the property is of a class type (excluding string), recursively call SetProperty
                SetProperty(property.GetValue(obj), propertyName, value);
            }
            else
            {
                // Otherwise, set the property value
                property.SetValue(obj, value);
                Console.WriteLine($"Set {propertyName} to {value}");
            }
        }
        else
        {
            Console.WriteLine($"Property {propertyName} does not exist or is read-only");
        }
    }

    static void SetPropertyForCollection(object obj, string propertyName, object value)
    {
        PropertyInfo property = obj.GetType().GetProperty(propertyName);
        Type propertyType = property.PropertyType.GetGenericArguments().FirstOrDefault();

        if (value is IEnumerable collection)
        {
            // Create an instance of the list type
            var list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(propertyType));

            // Iterate through each item in the collection and recursively set its properties
            foreach (var item in collection)
            {
                var listItem = Activator.CreateInstance(propertyType);
                SetProperty(listItem, propertyName, item);
                list.Add(listItem);
            }

            // Set the property value to the created list
            property.SetValue(obj, list);
            Console.WriteLine($"Set {propertyName} to {value}");
        }
    }
